---
description: 
globs: 
alwaysApply: false
---
# Form Handling

- Use a form library like react-hook-form for complex forms
- Pair with zod for schema validation
- Create reusable form components for common input types
- Handle form submission with async/await
- Separate validation logic from UI components
- Example pattern:

```tsx
// Form schema
const formSchema = z.object({
  name: z.string().min(2).max(50),
  email: z.string().email(),
  role: z.enum(['admin', 'user', 'guest']),
});

// Form component
export const UserForm = ({ onSubmit, defaultValues }) => {
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues,
  });
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* More fields... */}
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
```