---
description: Performance optimization, accessibility, and security best practices
globs: **/*.ts, **/*.tsx, **/*.jsx, **/*.js
alwaysApply: false
---
# Performance Considerations

- Use Next.js image optimization for images
- Implement pagination for large datasets
- Use React.memo for pure components that render often
- Optimize expensive calculations with useMemo and useCallback
- Use windowing (react-window or react-virtualized) for long lists
- Debounce user inputs that trigger expensive operations:

```tsx
// Example debounce hook
export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);
  
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  
  return debouncedValue;
}
```

- Implement proper suspense boundaries for asynchronous content
- Use skeleton loaders for content that takes time to load
- Lazy load components that aren't needed on initial render:

```tsx
// Example lazy loading
const HeavyComponent = lazy(() => import('@/components/HeavyComponent'));
```

# Accessibility

- Use semantic HTML elements
- Implement ARIA attributes for custom interactive components
- Ensure keyboard navigation works correctly
- Use appropriate heading hierarchy (h1, h2, etc.)
- Provide sufficient color contrast (at least 4.5:1 for normal text)
- Include focus states for interactive elements
- Use form labels for all form controls
- Test with screen readers
- Implement skip links for keyboard users
- Use proper button elements for interactive controls

# Security Considerations

- Always validate user input on the server
- Use proper authentication for protecting routes
- Implement proper authorization checks for data access
- Sanitize data before displaying it to prevent XSS
- Use environment variables for sensitive information
- Implement CSRF protection for forms
- Use Content Security Policy (CSP) headers
- Set secure and HttpOnly flags on cookies
- Validate and sanitize URL parameters and query strings
- Implement rate limiting for API endpoints