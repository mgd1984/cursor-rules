---
description: 
globs: 
alwaysApply: false
---
# React Component Standards

When creating or modifying React components in this project:

## Component Structure

- Use functional components with hooks instead of class components
- Keep components focused on a single responsibility
- Extract complex logic into custom hooks
- Use proper TypeScript typing for props and state

## Styling Approach

- Use Tailwind CSS for styling
- Avoid inline styles except for dynamic values
- Follow our color system defined in tailwind.config.js
- Use the design system components from our UI library when available

## Performance Considerations

- Memoize expensive calculations with useMemo
- Memoize callbacks with useCallback when passed as props
- Use React.memo for pure components that render often
- Avoid unnecessary re-renders by keeping state local

## Example Component

```tsx
import React, { useState, useCallback } from 'react';

interface ButtonProps {
  label: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary' | 'ghost';
  disabled?: boolean;
}

export const Button: React.FC<ButtonProps> = ({
  label,
  onClick,
  variant = 'primary',
  disabled = false,
}) => {
  const [isHovered, setIsHovered] = useState(false);

  const handleMouseEnter = useCallback(() => {
    setIsHovered(true);
  }, []);

  const handleMouseLeave = useCallback(() => {
    setIsHovered(false);
  }, []);

  const baseClasses = 'px-4 py-2 rounded transition-colors';
  
  const variantClasses = {
    primary: 'bg-blue-500 hover:bg-blue-600 text-white',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800',
    ghost: 'bg-transparent hover:bg-gray-100 text-gray-700',
  }[variant];

  const disabledClasses = disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer';

  return (
    <button
      className={`${baseClasses} ${variantClasses} ${disabledClasses}`}
      onClick={onClick}
      disabled={disabled}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {label}
    </button>
  );
};
